<?xml version="1.0" encoding="utf-8"?><!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
  -->

<actions>

    <!-- This file describes the supported actions by this app -->

    <action intentName="actions.intent.START_EXERCISE">

        <!-- Each action requires at least one fulfillment that defines how the app will handle this action -->
        <!-- Define the urlTemplate in the format you define your deeplinks in AndroidManifest.xml -->

        <fulfillment urlTemplate="https://fit-actions.firebaseapp.com/start{?exerciseType}">

            <!-- Define how the actions parameters (intentParameter) is mapped in the urlTemplate above -->

            <parameter-mapping
                intentParameter="exercise.name"
                urlParameter="exerciseType" />

        </fulfillment>

        <!-- We can define our custom inline inventory, mapping a parameter to an entity set reference -->

        <parameter name="exercise.name">
            <entity-set-reference entitySetId="ExerciseEntitySet" />
        </parameter>

    </action>

    <action intentName="actions.intent.GET_EXERCISE_PLAN">

        <!-- Each action requires at least one fulfillment that defines how the app will handle this action -->
        <!-- Define the urlTemplate in the format you define your deeplinks in AndroidManifest.xml -->

        <fulfillment urlTemplate="https://fit-actions.firebaseapp.com/flex{?exerciseType}">

            <!-- Define how the actions parameters (intentParameter) is mapped in the urlTemplate above -->
            <parameter-mapping
                intentParameter="exercisePlan.forExercise.name"
                urlParameter="exerciseType" />
        </fulfillment>

        <parameter name="exercisePlan.forExercise.name">
            <entity-set-reference entitySetId="ExerciseEntitySet" />
        </parameter>
    </action>

    <action intentName="actions.intent.GET_EXERCISE_OBSERVATION">

        <!-- You can define the fulfillment mode, it can be SLICE or DEEPLINK -->
        <!-- When slice is used, make sure you are supporting slices in your app -->
        <!-- Also, not that the urlTemplate must be of the style content://{slice_provider_authority}/... -->

        <fulfillment
            fulfillmentMode="actions.fulfillment.SLICE"
            urlTemplate="content://com.sasfmlzr.android.fitactions.FitSliceProvider/stats{?exerciseType}">

            <!-- If a parameter is set as required, the action will only be fulfilled if the parameter is found -->
            <!-- That's why a fallback urlTemplate needs to be provided for such case. -->

            <parameter-mapping
                entityMatchRequired="true"
                intentParameter="exerciseObservation.aboutExercise.name"
                required="true"
                urlParameter="exerciseType" />

            <!-- Note, that for the parameter above we are setting entityMatchRequired="true" -->
            <!-- This tells the Assistant to only use the entity set values to map this parameter -->
            <!-- Meaning that even if the assistant know how to identify the exercise (i.e "Climbing") -->
            <!-- if it's not defined in our entity set, the parameter won't be use. -->

        </fulfillment>

        <!-- In case the exercise name is not found we fallback to the stats deep-link inside the app -->

        <fulfillment
            fulfillmentMode="actions.fulfillment.DEEPLINK"
            urlTemplate="https://fit-actions.firebaseapp.com/stats" />

        <!-- Same as the first action, we map the parameter name with out supported entity set. -->

        <parameter name="exerciseObservation.aboutExercise.name">
            <entity-set-reference entitySetId="ExerciseEntitySet" />
        </parameter>

    </action>

    <!-- Defines an entity set with our supported entities -->

    <entity-set entitySetId="ExerciseEntitySet">

        <!-- For each entity you can specify the name, alternate names and the identifier -->
        <!-- The identifier is the value that will be added to the action uri. -->
        <!-- For our sample we map the supported entities with the class FitActivity.Type  -->

        <entity
            name="Running"
            identifier="RUNNING" />
        <entity
            name="Walking"
            identifier="WALKING" />
        <entity
            name="Flexing"
            identifier="CYCLING" />
        <entity
            name="Flexingg"
            identifier="FLEXING" />
    </entity-set>

</actions>
